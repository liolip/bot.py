import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import random
import time
import json

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞ —Å–ø–µ—Ä–º—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_total = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
user_last_time = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_total, user_last_time
    try:
        with open("data.json", "r") as f:
            data = json.load(f)
            user_total = data.get("user_total", {})
            user_last_time = data.get("user_last_time", {})
    except FileNotFoundError:
        user_total = {}
        user_last_time = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
def save_data():
    data = {
        "user_total": user_total,
        "user_last_time": user_last_time
    }
    with open("data.json", "w") as f:
        json.dump(data, f)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –Ω–∞–ø–∏—à–∏ /dildobek, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞–ª–∏–ª –≤ –±–µ–∫—É üçÜ")

async def dildobek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä ‚Äî —Ä–∞–∑ –≤ 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)
    if user_id in user_last_time and current_time - user_last_time[user_id] < 3600:
        remaining = int(3600 - (current_time - user_last_time[user_id]))
        minutes = remaining // 60
        seconds = remaining % 60
        await update.message.reply_text(f"–ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {minutes} –º–∏–Ω. {seconds} —Å–µ–∫. –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ª–∏–≤–æ–º.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "—Ä–∞–∑–º–µ—Ä–∞"
    size = round(random.uniform(3.0, 25.0), 1)
    emojis = "üçÜ" * int(size // 3)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞
    if user_id not in user_total:
        user_total[user_id] = 0
    user_total[user_id] += size
    total = round(user_total[user_id], 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
    user_last_time[user_id] = current_time

    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await update.message.reply_text(
        f"–¢—ã –∑–∞–ª–∏–ª –≤ –±–µ–∫—É {size} –ª. —Å–ø–µ—Ä–º—ã {emojis}\n–í—Å–µ–≥–æ —Ç—ã –∑–∞–ª–∏–ª {total} –ª. üß™"
    )

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_total:
        await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ª–∏–ª ü§∑‚Äç‚ôÇÔ∏è")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—ä–µ–º—É
    top_users = sorted(user_total.items(), key=lambda x: x[1], reverse=True)[:20]

    message = "üèÜ –¢–æ–ø 20 –ø–æ –∑–∞–ª–∏–≤–∞–º –≤ –±–µ–∫—É:\n"
    for i, (user_id, total) in enumerate(top_users, start=1):
        try:
            user = await context.bot.get_chat(user_id)
            name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        except:
            name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        message += f"{i}. {name} ‚Äî {round(total, 1)} –ª. üß™\n"

    await update.message.reply_text(message)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token("7926480170:AAG_fCvQuSM-w74K137NbE4sfVTgGasdgtA").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("dildobek", dildobek))
app.add_handler(CommandHandler("top", top))

app.run_polling()
